#pragma once

/* Linux kernel-like linked list. */

#include <stddef.h>		/* offsetof */

#define DSCORE_LIST_ENTRY(PTR, TYPE, FIELD) \
	((TYPE *)(((char *)PTR) - offsetof(TYPE, FIELD)))

#define DSCORE_LIST_INIT(list) {&list, &list}

#define dscore_list_foreach(ptr, head) \
	for (ptr = (head)->next; ptr != head; ptr = ptr->next)

#define dscore_list_foreach_rev(ptr, head) \
	for (ptr = (head)->prev; ptr != head; ptr = ptr->prev)

#define dscore_list_foreach_safe(ptr, head, tmp)		\
	for (ptr = (head)->next, tmp = ptr->next;	\
	     ptr != head;				\
	     ptr = tmp, tmp = tmp->next)

#define dscore_list_foreach_rev_safe(ptr, head, tmp)	\
	for (ptr = (head)->prev, tmp = ptr->prev;	\
	     ptr != head;				\
	     ptr = tmp, tmp = tmp->prev)

	struct dscore_list_head {
		struct dscore_list_head *next;
		struct dscore_list_head *prev;
	};

	static inline void dscore_list_init(struct dscore_list_head *head) {
		head->next = head;
		head->prev = head;
	} static inline int dscore_list_is_empty(struct dscore_list_head *list) {
		return list->next == list && list->prev == list;
	}

	static inline void dscore_list_remove(struct dscore_list_head *item) {
		item->prev->next = item->next;
		item->next->prev = item->prev;
	}

	static inline void dscore_list_add_first(struct dscore_list_head *item,
						 struct dscore_list_head *list)
	{
		item->next = list->next;
		item->prev = list;
		list->next->prev = item;
		list->next = item;
	}

	static inline void dscore_list_add_last(struct dscore_list_head *item,
						struct dscore_list_head *list) {
		item->next = list;
		item->prev = list->prev;
		list->prev->next = item;
		list->prev = item;
	}

	static inline void dscore_list_concat(struct dscore_list_head *item,
					      struct dscore_list_head *list) {
		if (!dscore_list_is_empty(list)) {
			item->prev->next = list->next;
			list->next->prev = item->prev;
			item->prev = list->prev;
			list->prev->next = item;
		}
	}
